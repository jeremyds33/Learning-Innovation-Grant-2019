/*
  Ultrasonic Sensor HC-SR04 and Arduino Tutorial

    SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 4 (for MKRZero SD: SDCARD_SS_PIN)
 ** TRIG - pin 7
 ** ECHO - pin 8
  by Dejan Nedelkovski, adapted by Jeremy Smith
*/

// libraries
#include <SPI.h>
#include <SD.h>

const int chipSelect = 4;


// defines pins numbers
const int trigPin = 7;
const int echoPin = 8;

// defines variables
long duration;
long distance;
long Hz;
int fs;
long temperature;
long speedSound;

void setup() {
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication

  temperature = 20; // degrees Celsius
  speedSound = (331.5 + 0.60 * temperature) * 1e-4; // cm/microsecond

  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  Serial.print("Initializing SD card...");

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
  Serial.println("card initialized.");
}
void loop() {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for >30 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(30);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculating the distance
  distance = duration * 0.034 / 2.0;

  //    // Prints the distance on the Serial Monitor
  //    Serial.print("Distance: ");
  //    Serial.print(distance);
  //    Serial.println("cm");

  // Sampling frequency
  Hz = 100;
  fs = 1 / Hz * 1000; // milliseconds
  delay(fs);

  // make a string for assembling the data to log:
  String dataString = "";

  // append to the string:
  dataString += String(distance);
  dataString += ",";


  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  File dataFile = SD.open("datalog.txt", FILE_WRITE);

  // if the file is available, write to it:
  if (dataFile) {
    dataFile.println(dataString);
    dataFile.close();
    // print to the serial port too:
    Serial.println(dataString);
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
  }
}
